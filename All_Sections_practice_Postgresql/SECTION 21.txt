--SECTION 21
--USING DATE/TIMEIN PostgreSQL

--Data Types
  --timestamp - both date and time
  --date -date only
  --time -time only

--Month date settings
--You can see the settings with:

SHOW DateStyle;

--You can change by
SET DateStyle = 'ISO,DMY';

SET DateStyle = 'ISO,MDY'

--Create Test Table
CREATE TABLE test_time (
	startdate DATE,
	startstamp TIMESTAMP,
	starttime TIME
);

INSERT INTO test_time (startdate, startstamp,starttime)
VALUES (current_date, current_timestamp, current_time);


SELECT * FROM test_time;

SELECT EXTRACT (EPOCH FROM TIMESTAMP '2022-01-18 12:28:15')
-- Insert INTO test_time (startdate, startstamp)
-- VALUES ('NOW'::abstime,'today'::abstime);


SELECT * FROM test_time;

**************************************************************************

--TIME ZONES 
--Depends on geography and politics. Vary by date due to daylight saving changes
--PostgreSQL recommends using date and time whe using time zones.

--3Different Formats
--Full zoe name: America/Los Angeles
--Abbreviation:EST
--POSIX-style:EST+5 or EST+5EDT (eastern standard time with daylight saving time)

--1)How to see the Available Names
SELECT * FROM pg_timezone_names;

SELECT * FROM  pg_timezone_abbrevs;


--2)Add some Columns To test_time
ALTER TABLE test_time
ADD COLUMN endstamp TIMESTAMP WITH TIME ZONE;

ALTER TABLE test_time
ADD COLUMN endtime TIME WITH TIME ZONE;


INSERT INTO test_time
(endstamp,endtime)
VALUES ('01/20/2018 10:30:00 US/Pacific', '10:30:00+5');

INSERT INTO test_time (endstamp,endtime)
VALUES ('06/20/2018 10:30:00 US/Pacific', '10:30:00+5');

//Notice the difference in offset due to daylight savings time
SELECT * FROM test_time;

--3)See/Set TimeZone For Session

SHOW TIME ZONE;
//notice the offset of time
SELECT * FROM test_time;

SET TIME ZONE 'US/Pacific'

//notice offset changed
SELECT * FROM test_time;
***************************************************************************

--Interval Data Type
--Syntax  Basic: interval
--Advanced: interval[fields][precision]
--SQL Standard Format
--'4 32:12:10'='4 days 32 hours 12 minutes 10 seconds'
--'200-10'='200 years 10 months'
--'1-2'='1 year 2 months'

--1)Add Interval Type To test_sql
SELECT * FROM test_time;

ALTER TABLE test_time
ADD COLUMN span interval;

DELETE  FROM test_time;

--Input Postgres Format
--Put in 5 DECADES 3 YEARS, 6 MONTHS and 3 DAYS. Also do again with ago
INSERT INTO test_time (span)
VALUES ('5 DECADES 3 YEARS, 6 MONTHS 3 DAYS');

INSERT INTO test_time (span)
VALUES ('5 DECADES 3 YEARS, 6 MONTHS 3 DAYS ago');

SELECT * FROM test_time;


--Input SQL Format
--SQL Standard 
--1) Do 2 inputs: 4 days 32 hours 12 minutes and 10 seconds
----1 year and 2 months

INSERT INTO test_time (span)
VALUES ('4 32:12:10');

SELECT * FROM test_time;

INSERT INTO test_time (span)
VALUES ('1-2');


--ISO 8061 Formats
--1) Input: 5 years, 3 months, 7 hours and 3 minutes
---- 25 years, 2months, 30 days,17 hours,33 minutes and 10 seconds
INSERT INTO test_time (span)
VALUES ('P5Y3MT7H3M');

SELECT * FROM test_time;

INSERT INTO test_time (span)
VALUES ('P25-2-30T17:33:10');

--Interval Output Formats
--4 styles:sql_standard, postgres,postgres_verbose, or iso_8601

SHOW intervalstyle;
SELECT * FROM test_time;

SET intervalstyle='postgres_verbose';
SELECT * FROM test_time;

SET intervalstyle='sql_standard';
SELECT * FROM test_time;

SET intervalstyle='iso_8601';
SELECT * FROM test_time;

SET intervalstyle='postgres';

***************************************************************************

--Date Arithmetic
--You can add a date,time,timestamp,or interval with an interval.
--Lets show some examples:

SELECT DATE '2018-09-28' + INTERVAL '5 days 1 hour';

SELECT TIME '5:30:10' + INTERVAL '70 minutes 80 seconds';

SELECT TIMESTAMP '1917-06-20 12:30:10.222' +
  INTERVAL '30 years 6 months 7 days 3 hours 17 minutes 3 seconds';

SELECT INTERVAL '5 hours 30 minutes 2 seconds' +
      INTERVAL '5 days 3 hours 13 minutes';

SELECT DATE '2017-04-05' +  INTEGER '7';

--Substraction of Intervals
-- subtracting intervals from date,time, timestamp
SELECT DATE '2018-10-20' - INTERVAL '2 months 5 days';

SELECT TIME '23:39:17' - INTERVAL '12 hours 7 minutes 3 seconds'

SELECT TIMESTAMP '2016-12-30' - INTERVAL '27 years 3 months 17 days 3 hours 37 minutes';

-- subtracting integer from date
SELECT DATE '2016-12-30' - INTEGER '300';

--subtracting 2 dates
--Returns number of days between
SELECT DATE '2016-12-30' - DATE '2009-04-7';

-- subtracting 2 times and 2 timestamps
--Returns the interval between them
SELECT TIME '17:54:01' - TIME '03:23:45';

SELECT TIMESTAMP '2001-02-15 12:00:00' - TIMESTAMP '1655-08-30 21:33:05';

--Multiply and divide intervals
--Return an interval
SELECT 5 * INTERVAL '7 hours 5 minutes';

SELECT INTERVAL '30 days 20 minutes' / 2;

--Age Function
--Returns diffrence between two timestamps or between now and timestamp
SELECT age(TIMESTAMP '2025-10-03', TIMESTAMP '1999-10-03');
SELECT age (TIMESTAMP '1969-04-20');

***********************************************************************************

--Pulling Out Parts of dates and times
--Two Functions : 1.EXTRACT 2.date_part

--1)How many years old are the employees
SELECT EXTRACT(YEAR FROM age(birthdate)),firstname, lastname
FROM employees;

--Using date_part
--2)Find the day part of the ship date on all orders
SELECT date_part('day', shippeddate)
FROM orders;

--3)Find how many decades old each employees is using both syntaxes
SELECT EXTRACT(DECADE FROM age(birthdate)),firstname, lastname
FROM employees;

SELECT date_part('DECADE',age(birthdate)),firstname, lastname
FROM employees;

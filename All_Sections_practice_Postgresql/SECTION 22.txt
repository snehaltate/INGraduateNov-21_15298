--SECTION 22
--WINDOWS FUNCTION
--What are window functions?
   --A way to combine Group By aggregation with regular select statemnts. The value of aggregation is calculated without combining the returned rows.

--1)Lets find out product prices i a category compared to average for category
SELECT categoryname,productname,unitprice,
AVG(unitprice) OVER (PARTITION BY categoryname)
FROM products
JOIN categories ON categories.categoryid=products.categoryid
ORDER BY categoryname,unitprice DESC;

--2)We are looking for strange orders of the product 'Alice Mutton'. Find all records of order details of this product compared to the average order.
SELECT productname,quantity,
AVG(quantity) OVER (PARTITION BY order_details.productid)
FROM products
JOIN order_details on order_details.productid = products.productid
WHERE productname='Alice Mutton'
ORDER BY quantity DESC;

--3)Compare each products order quantity compared to the average order for that product
SELECT productname,orderid,quantity,
AVG(quantity) OVER (PARTITION BY order_details.productid) AS average
FROM products
JOIN order_details on products.productid=order_details.productid
************************************************************************************

--Using Window Functions with Subqueries
--1)Someone ask about fraud detection. We want to know when an order comes i that is 5 times greater that the cutomer's average order.
SELECT companyname, orderid, amount , average_order FROM
( SELECT companyname, orderid, amount ,AVG(amount) OVER (PARTITION BY companyname) AS average_order
FROM
(SELECT companyname,orders.orderid,SUM(unitprice*quantity) AS amount
FROM customers
JOIN orders ON orders.customerid=customers.customerid
JOIN order_details ON orders.orderid=order_details.orderid
GROUP BY companyname,orders.orderid) as order_amounts) as order_averages
WHERE amount > 5 * average_order
ORDER BY companyname

--2)Find any suppliers that had 3 times the normal quantity of orders over all their products versus the average order per month
SELECT companyname,month,year,total_orders,average_monthly
FROM (
SELECT companyname,total_orders,month,year,
AVG(total_orders) OVER (PARTITION BY companyname) as average_monthly
FROM (
SELECT companyname,SUM(quantity) as total_orders,date_part('month',orderdate) as month,date_part('year',orderdate) as year
FROM order_details
JOIN products ON order_details.productid = products.productid
JOIN suppliers ON suppliers.supplierid=products.supplierid
JOIN orders ON orders.orderid=order_details.orderid
GROUP BY companyname,month,year)  as order_by_month) as average_monthly
WHERE total_orders > 3 * average_monthly
*************************************************************************

--Using Rank() To find The First N Records In Join
--1)How do i join two tabls and return the top 2 results from the 2nd table for each row in first table?
   --LIMIT wont work because it limits total rows returned. 
   --Window function rank() will do this.
SELECT * FROM
(SELECT orders.orderid, productid, unitprice, quantity,
 	rank() OVER (PARTITION BY order_details.orderid ORDER BY (quantity*unitprice) DESC) AS rank_amount
FROM orders
NATURAL JOIN order_details) as ranked
WHERE rank_amount <=2;

--2)Find the 3 least expensive products from each supplier. Retrun upplier ame, product name, and price
SELECT companyname,productname,unitprice FROM
(SELECT companyname,productname,unitprice,
rank() OVER (PARTITION BY products.supplierid ORDER BY unitprice ASC) AS price_rank
FROM suppliers
NATURAL JOIN products) as ranked_products
WHERE price_rank <=3;
